--- 1.**javascript 的 typeof返回那些数据类型？**
    + object、string、boolean、number、undefined、function

--- 2.**列举3种强制类型转换和2种隐式类型转换？**
    + *强制*：parseInt、parseFloat、Number
    + *隐式*：==  ！ +  -  if  while  for in

--- 3.**split()replace()、join()的区别**
    + replace（regexp/substr,replacement）:一些字符串替换为另一些字符串
    + split（separator）：字符串切割成数组的形式

    + slice(start,end)：起始位置截取字符串，返回新字符串。数组中也有这个方法，选取后返回新数组。

    + join(separator)：将数组转换成字符串
    + indexOf(searchvalue) 方法可返回某个指定的字符串值在字符串中首次出现的位置
    + charAt() 方法可返回指定位置的字符。stringObject.charAt(index)
    + match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。

    易混处splice()方法向/从数组中添加/删除项目，然后返回被删除的项目。操作的是原数组。
    arrayObject.splice(index,howmany,item1,.....,itemX)
    
--- 4.**数组方法 pop、push、unshift、shift**
    + push：尾部添加  pop：尾部删除
    + unshift：头部添加   shift：头部删除 slice splice如上一题

--- 5.**事件绑定和普通事件有什么区别？**
    + 普通事件的方法
        ```
          var btn = document.getElementById('hello');
          btn.onclick = function(){
              alert('hello');
          }
          btn.onclick = function(){
              alert('2')
          }
          //输出 2
        ```
        ==执行上面的代码弹窗2==
        
    + 事件绑定方式添加事件：
        ```
         var btn = document.getElementById('hello');
         btn.addEventListener('click',function(){
             alert(1);
         },false)
         btn.addEventListener('click',function(){
             alert(2);
         },false);
         
        ```
        ==执行上面的代码会先 alert1 再 alert2 普通添加事件的方法不支持添加多个事件，
        最下面的事件会覆盖上面的，而事件绑定（addEventListener）方式添加事件可以添加多个。
        addEventListener 不兼容低版本IE，普通事件无法取消，addEventLisntener 还支持事件冒泡+事件捕获==

--- 6.**IE 和 DOM 事件流的区别**
       IE采用冒泡型事件 Netscape使用捕获型事件 DOM使用先捕获后冒泡型事件 
       示例： 

       复制代码代码如下:

       <body> 
       <div> 
       <button>点击这里</button> 
       </div> 
       </body> 

       冒泡型事件模型： button->div->body (IE事件流) 

       捕获型事件模型： body->div->button (Netscape事件流) 

       DOM事件模型： body->div->button->button->div->body (先捕获后冒泡) 

       事件侦听函数的区别 

       IE使用: 
       [Object].attachEvent("name_of_event_handler", fnHandler); //绑定函数 
       [Object].detachEvent("name_of_event_handler", fnHandler); //移除绑定 

       DOM使用： 
       [Object].addEventListener("name_of_event", fnHandler, bCapture); //绑定函数 
       [Object].removeEventListener("name_of_event", fnHandler, bCapture); //移除绑定 

--- 7.**IE 和标准下有哪些兼容性写法**
    ```
      var ev = ev || window.event;
      document.documentElement.clientWidth || document.body.clientWidth
      var target = ev.srcElement || ev.target;

--- 8.**call 和 apply 的区别**
    + call
        * 语法：call(thisObj,Object1,Object2....);
        * 定义：调用一个对象的一个方法，以另一个对象替换当前对象
        a.call(b,arg1,arg2..)就是a对象的方法应用到b对象上
        * 说明：cll 方法可以用来代替另一个对象调该对象的方法。
        call 方法可以将一个函数的对象上下文从初始的上下文改变由 thisObj 指定的新对象。
        如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj.
    + apply方法
        * 语法：apply(thisObj,[argArray]);
        * 定义：应用某一个对象的一个方法，用另一个对象替换当前对象。
        * 说明：如果 argArray 不是一个有效的数组或者不是 arguments 对象，
        那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，
        那么 Global 对象将被用作 thisObj，并且无法被传递任何参数。

--- 9.**b 继承 a 的方法**
    ```
      function A( age, name ){
          this.age = age;
          this.name = name;
      }
      A.prototype.show = function(){
          alert('父级方法');
      }
      B.prototype = new A();
      function B( age , name ,job ){
          A.apply(this,arguments);
          this.job = job;
      }

      var a = new A(14,'遐客行');
      var b = new B(15,'朗霞','侠客');
      
      console.log(b)
      b.show()
      
      apply用来改变指针传递参数

      function animal(){
        this.eat=function(){console.log("eat")}
      }
      function dog(){
        this.bark=function(){console.log("bark")}
      }
     dog.prototype=new animal()
     var d= new dog()
     d.eat()

--- 10.**如何阻止事件冒泡和默认事件**
    + 阻止事件冒泡
        ```
          //阻止事件冒泡
          function stopBubble(e){
              //如果提供了事件对象，则这是一个非IE浏览器
              if ( e && e.stopPropagation ){
                  //因此它支持W3C的stopPropagation()
                  e.stopPropagation();
              }else{
                  //否则，我们需要使用IE的方式来取消冒泡
                  window.event.cancelBubble = true;
              }
          }
        ```
    + 阻止事件默认行为
        ```
          function stopDefault(e){
              //w3c
              if ( e && e.preventDefault ){
                  e.preventDefault();
              }else{
                  //IE
                  window.event.returnValue = false;
              }
              return false;
          }

--- 11.**添加、删除、替换、插入到某个节点的方法**
    + appendChild、removeChild、replaceChild、insertBefore
       
--- 12.**javascript 的本地对象，内置对象和宿主对象**
    + 本地对象为 array obj regexp 等可以new实例化
    + 内置对象为 gload Math 等不可以实例化的
    + 宿主对象为浏览器自带的 document,window 等

--- 13.**window.onload 和 document ready 的区别**
    + window.onload 是在 dom 文档树加载完所有文件之后执行一个函数
    + Document.ready 原生没有这个方法，jquery 中有$().ready(function)，
    在 dom 文档树加载完后执行一个函数（这里的文档树加载完不代表文件加载完）
    + $(document).ready 要比 window.onload 先执行
    + window.onload 只能执行一次，$(document).ready 可能出现多次

--- 14.**"= =" 和 "==="的不同**
    + 前者会自动转换成类型，后者不会

--- 15.**javascript 的同源策论**
    + 一段脚本只能读取来自同一源的窗口和文档属性，这里的同一个源指的的是主机名、协议和端口号的组合

--- 16.**javascript 是一门什么样的语言，它有哪些特点？**
    + javascript 是一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。
    它的解释器被称为 javascript 引擎，为浏览器的一部分，广泛用于客户端的脚本语言，
    最早是在 html 网页上使用，用来给html网页增加动态功能。 javascript 兼容于ECMA标准，因此也称为 ECMAscript。
    + *基本特点*
        * 1.是一种解释性脚本语言
        * 主要用来向 HTML 页面添加交互行为
        * 可以直接嵌套 HTML 页面，但写成单独的js 文件有利于结构和行为的分离
        * 跨平台特性，在绝大多数浏览器的支持，可以在多种平台下运行

--- 17.**javascript 的数据类型都有什么？**
    + 基本数据类型：String,Boolean,Number,undefined,null
    + 引用数据类型：Object(Array,Date,RegExp,Function)
    + **如何判断某变量是否为数组类型？**
        * 1.使用数组方法 slice 的方式
        * 2.obj instanceof Array 在某些IE版本中不正确
        * 3.使用 ECMAScript5 中定义的方法 Array.isArray();
        * 4.最好的方法：
        ```
          if ( typeof Array.isArray === 'undefined' ){
              Array.isArray = function(arg){
                  return Object.prototype.toString.call(arg) === "[object Array]";
              }
          }
        ```
--- 18.**希望获取到页面中所有的checkbox怎么做？（不使用第三方框架）**
    ```
        var domList = document.getElementsByTagName(‘input’)
        var checkBoxList = [];
        var len = domList.length;//缓存到局部变量
        while (len--) {　　//使用while的效率会比for循环更高
    　　    if (domList[len].type == ‘checkbox’) {
            　　checkBoxList.push(domList[len]);
        　　}
        }

--- 19.**javascript 的事件流模型都有什么？**
    + “事件冒泡”：事件开始由最具体的元素接收，然后逐级向上传播
    + “事件捕捉”：事件由最不具体的节点接收，然后逐级向下，一直到最具体的
    + DOM 事件流：三个阶段：事件捕捉、目标阶段、事件冒泡

--- 20.**看下列代码输出为何？解释原因 var a; alert(typeof a);//undefind alert(b);//报错**
    ```
      var a;
      alert(typeof a);//undefind
      alert(b);//报错
    ```
    + 解释：undefind 是一个只有一个值得数据类型，这个值就是 undefind，
    在使用 var 声明变量但未对其赋值进行初始化时，这个变量的值就是 undefind 。而 b 由于未声明将报错。

--- 21.**看下面代码输出什么？解释原因 var undefined; undefined == null; // true 1 == true;   // true 2 == true;   // false 0 == false;  // true 0 == '';     // true NaN == NaN;  // false [] == false; // true [] == ![];   // true**
    ```
    var undefined;
    undefined == null; // true
    1 == true;   // true
    2 == true;   // false
    0 == false;  // true
    0 == '';     // true
    NaN == NaN;  // false
    [] == false; // true
    [] == ![];   // true
   
    var foo = "11"+2-"1";
    console.log(foo);
    console.log(typeof foo);
    执行完后foo的值为111，foo的类型为Number。

    ```
    +  undefined与null相等，但不恒等（=\=\=）
    一个是number一个是string时，会尝试将string转换为number
    尝试将boolean转换为number，0或1
    尝试将Object转换成number或string，取决于另外一个对比量的类型
    所以，对于0、空字符串的判断，建议使用 “=\=\=” 。“\=\=\=”会先判断两边的值类型，类型不匹配时为false。
    那么问题来了，看下面的代码，输出什么，foo的值为什么？
    ```
    var foo = "11"+2-"1";
    console.log(foo);
    console.log(typeof foo);
    ```
    + 执行完后foo的值为111，foo的类型为Number

--- 22.**看代码给答案 var a = new Object(); a.value = 1; b = a; b.value = 2; alert(a.value)**
    ```
    var a = new Object();
    a.value = 1;
    b = a;
    b.value = 2;
    alert(a.value)

    ```
    + 答案：2（考察引用数据类型细节）

--- 23.**	已知数组 var stringArray = ["This", "is", "Baidu", "Campus"]，Alert 出 This is Baidu **
    var stringArray = ["This", "is", "Baidu", "Campus"]，Alert 出 This is Baidu
    alert("This is"+stringArray.join().match("Baidu"))

--- 24.** 已知有字符串 foo="get-element-by-id",写一个 function 将其转化成驼峰表示法 ”getElementById”**
 
    foo="get-element-by-id"
    function combo(msg){
        var arr=msg.split("-");
        for(var i=1;i<arr.length;i++){//从第二个开始循环
            arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);
        }
        msg=arr.join("");
        return msg;
        }

    combo(foo)

--- 25.**var numberArray = [3,6,2,4,1,5]（考察基础API）**
    + 实现对该数组的倒排，输出[5,1,4,2,6,3]
    ```
    numberArray.reverse()
    ```
    + 实现对该数组的降序排列，输出[6,5,4,3,2,1]
    ```
      numberArray.sort(function(a,b){return b-a})

--- 26.**输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26**
   
    var d = new Date();
    // 获取年，getFullYear()返回4位的数字
    var year = d.getFullYear();
    // 获取月，月份比较特殊，0是1月，11是12月
    var month = d.getMonth() + 1;
    // 变成两位
    month = month < 10 ? '0' + month : month;
    // 获取日
    var day = d.getDate();
    day = day < 10 ? '0' + day : day;
    alert(year + '-' + month + '-' + day);

--- 27.**将字符串”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）**
   
     <tr><td>{$id}</td><td>{$id}_{$name}</td></tr>".replace(/{\$id}/g, '10').replace(/{\$name}/g, 'Tony')

--- 28.**为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数escapeHtml，将<, >, &, “进行转义**
    ```
    function escapeHtml(str) {
        return str.replace(/[<>”&]/g,     function(match) {
            switch (match) {
               case “<”:
                  return “&lt;”;
               case “>”:
                  return “&gt;”;
               case “&”:
                  return “&amp;”;
               case “\””:
                  return “&quot;”;
              }
          });
    }

--- 29.**	foo = foo||bar ，这行代码是什么意思？为什么要这样写？**
    + if(!foo) foo = bar;如果foo存在，值不变，否则把bar的值赋给foo。
    短路表达式：作为”&&”和”||”操作符的操作数表达式，这些表达式在进行求值时，
    只要最终的结果已经可以确定是真或假，求值过程便告终止，这称之为短路求值。

--- 30.**看下列代码，将会输出什么?(变量声明提升) var foo = 1; (function(){ console.log(foo); var foo = 2; console.log(foo); })()**
    ```
       var foo = 1;
        (function(){
            console.log(foo);
            var foo = 2;
            console.log(foo);
        })()
    ```
    ==答案：输出undefined 和 2。函数内声明foo=2后，提升到函数内全局，但是提升的都是声明，并没有值，所以未定义。上面代码相当于：==

      var foo = 1;
        
     (function(){
  
  
       console.log(foo); //1           
         foo = 2;
            
         console.log(foo); // 2;
        
      })()
1
    ```
      var foo = 1;
        (function(){
            var foo;
            console.log(foo); //undefined
            foo = 2;
            console.log(foo); // 2;   
        })()

    ```
    ==函数声明与变量声明会被 javscript 引擎隐式地提升到当前作用域的顶部，但是只是提升名称不会提升赋值部分==

--- 31.**用 js 实现随机选取 10 - 100 之间的10个数字，存入一个数组，并排序**
    ```
        function randomNub(aArray, len, min, max) {
            if (len >= (max - min)) {
                return '超过' + min + '-' + max + '之间的个数范围' + (max - min - 1) + '个的总数';
            }
            if (aArray.length >= len) {
                aArray.sort(function (a, b) {
                    return a - b
                });
                return aArray;
            }
            var nowNub = parseInt(Math.random() * (max - min - 1)) + (min + 1);
            for (var j = 0; j < aArray.length; j++) {
                if (nowNub == aArray[j]) {
                    randomNub(aArray, len, min, max);
                    return;
                }
            }
            aArray.push(nowNub);
            randomNub(aArray, len, min, max);
            return aArray;
        }
        var arr = [];
        console.log(randomNub(arr, 10, 10, 100));

--- 32.**把两个数组合并，并删除第二个元素**
    ```
      var array1 = ['a','b','c'];
      var array2 = ['d','e','f'];
      var array3 = array1.concat(array2);
      array3.splice(1,1);

--- 33.**怎样添加、移除、移动、复制、创建和查找节点（原生JS，）**
    + createDocumentFragment():创建新节点，创建一个 DOM 片段，储存文档碎片

    var oFragment = document.createDocumentFragment();

    for(var i = 0 ; i < 10; i ++) {
       var p = document.createElement("p");
       var oTxt = document.createTextNode("段落" + i);
       p.appendChild(oTxt);
       oFragment.appendChild(p);<br>}

    document.body.appendChild(oFragment);

    + createElement():创建一个具体元素
    + createTextNode():创建一个文本节点
    + appendChild():添加节点
    + removeChild():删除节点
    + replaceChild():替换节点
    + insertBefore():插入节点
    + getElementsByTagName():通过标签名称查找节点
    + getElementsByName():通过元素的 Name 属性值查找
    + getElementById():通过元素Id，唯一性

--- 34.**有这样一个URL：http://item.taobao.com/item.htm?a=1&b=2&c=&d=xxx&e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如{a:’1′, b:’2′, c:”, d:’xxx’, e:undefined}**
    ```
      function serilizeUrl(url) {
            var urlObject = {};
            if (/\?/.test(url)) {
                var urlString = url.substring(url.indexOf("?") + 1);
                var urlArray = urlString.split("&");
                for (var i = 0, len = urlArray.length; i < len; i++) {
                    var urlItem = urlArray[i];
                    var item = urlItem.split("=");
                    urlObject[item[0]] = item[1];
                }
                return urlObject;
            }
            return null;
        }
      var obj=  serilizeUrl('http://item.taobao.com/item.htm?a=1&b=2&c=&d=xxx&e');
      console.log(obj)

--- 35.**正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？**
    + 答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\”表示”），
   并且还需要双反斜杠（即\\表示一个\）。使用正则表达字面量的效率更高。
    ```
      var regMail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;

--- 36.**看下面代码，给出输出结果**
    ```
      for (var i = 1; i <= 3; i++) {
        setTimeout(function () {
            console.log(i);
        }, 0);
      };
    ```
    ==输出：4 4 4==
    ==原因：Javascript事件处理器在线程空闲之前不会运行。追问，如何让上述代码输出1 2 3？==
    ```
      for (var i = 1; i <= 3; i++) {
            setTimeout((function (i) { //改成立即执行函数
                console.log(i);
            })(i), 0);
        };

--- 37.**写一个function，清除字符串前后的空格。（兼容所有浏览器）**
    ```
       if (!String.prototype.trim) {
            String.prototype.trim = function () {
                return this.replace(/^\s+/, "").replace(/\s+$/, "");
            }
        }
        // test the function 
        var str = " \t\n test string ".trim();
        alert(str == "test string"); // alerts "true"

--- 38.**javascript 中 callee 和 caller 的作用？**
    + caller 是返回一个函数的引用，该函数调用了当前函数
    + callee 是返回正在被执行的 function 函数，也就是所指定的 function 对象的正文

--- 39.**Javascript中, 以下哪条语句一定会产生运行错误？**
    ```
    A、var _变量=NaN;  
    B、var 0bj = []; //命名不对，报错，不用以数字开头  
    C、var obj = //; //运行undefind 	
    D、var obj = {};
    ```
    ==答案BC，注意：C在有些浏览器上会报错，chrome运行fundefind ==